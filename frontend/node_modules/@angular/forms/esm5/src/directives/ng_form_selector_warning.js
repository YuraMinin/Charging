/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { Directive, Inject, InjectionToken, Optional } from '@angular/core';
import { TemplateDrivenErrors } from './template_driven_errors';
/**
 * @description
 * `InjectionToken` to provide to turn off the warning when using 'ngForm' deprecated selector.
 */
import * as ɵngcc0 from '@angular/core';
export var NG_FORM_SELECTOR_WARNING = new InjectionToken('NgFormSelectorWarning');
/**
 * This directive is solely used to display warnings when the deprecated `ngForm` selector is used.
 *
 * @deprecated in Angular v6 and will be removed in Angular v9.
 * @ngModule FormsModule
 * @publicApi
 */
var NgFormSelectorWarning = /** @class */ (function () {
    function NgFormSelectorWarning(ngFormWarning) {
        if (((!ngFormWarning || ngFormWarning === 'once') && !NgFormSelectorWarning_1._ngFormWarning) ||
            ngFormWarning === 'always') {
            TemplateDrivenErrors.ngFormWarning();
            NgFormSelectorWarning_1._ngFormWarning = true;
        }
    }
    NgFormSelectorWarning_1 = NgFormSelectorWarning;
    var NgFormSelectorWarning_1;
    /**
     * Static property used to track whether the deprecation warning for this selector has been sent.
     * Used to support warning config of "once".
     *
     * @internal
     */
    NgFormSelectorWarning._ngFormWarning = false;
    NgFormSelectorWarning = NgFormSelectorWarning_1 = tslib_1.__decorate([
        tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(NG_FORM_SELECTOR_WARNING)),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], NgFormSelectorWarning);
NgFormSelectorWarning.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgFormSelectorWarning, selectors: [["ngForm"]], factory: function NgFormSelectorWarning_Factory(t) { return new (t || NgFormSelectorWarning)(ɵngcc0.ɵɵdirectiveInject(NG_FORM_SELECTOR_WARNING, 8)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgFormSelectorWarning, [{
        type: Directive,
        args: [{ selector: 'ngForm' }]
    }], function () { return [{ type: Object, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NG_FORM_SELECTOR_WARNING]
            }] }]; }, null);
    return NgFormSelectorWarning;
}());
export { NgFormSelectorWarning };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L1Byb2plY3RzL1Rlc3RQcm9qZWN0L0NoYXJnaW5nL0NoYXJnaW5nL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYW5ndWxhci9mb3Jtcy9lc201L3NyYy9kaXJlY3RpdmVzL25nX2Zvcm1fc2VsZWN0b3Jfd2FybmluZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBY0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEVBeUIwRSxBQUNoQzs7Ozs7Ozs7Ozs7Ozs0QkFHWiIsImZpbGUiOiJuZ19mb3JtX3NlbGVjdG9yX3dhcm5pbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXHJcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcclxuICovXHJcbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5qZWN0LCBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVGVtcGxhdGVEcml2ZW5FcnJvcnMgfSBmcm9tICcuL3RlbXBsYXRlX2RyaXZlbl9lcnJvcnMnO1xyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIGBJbmplY3Rpb25Ub2tlbmAgdG8gcHJvdmlkZSB0byB0dXJuIG9mZiB0aGUgd2FybmluZyB3aGVuIHVzaW5nICduZ0Zvcm0nIGRlcHJlY2F0ZWQgc2VsZWN0b3IuXHJcbiAqL1xyXG5leHBvcnQgdmFyIE5HX0ZPUk1fU0VMRUNUT1JfV0FSTklORyA9IG5ldyBJbmplY3Rpb25Ub2tlbignTmdGb3JtU2VsZWN0b3JXYXJuaW5nJyk7XHJcbi8qKlxyXG4gKiBUaGlzIGRpcmVjdGl2ZSBpcyBzb2xlbHkgdXNlZCB0byBkaXNwbGF5IHdhcm5pbmdzIHdoZW4gdGhlIGRlcHJlY2F0ZWQgYG5nRm9ybWAgc2VsZWN0b3IgaXMgdXNlZC5cclxuICpcclxuICogQGRlcHJlY2F0ZWQgaW4gQW5ndWxhciB2NiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIEFuZ3VsYXIgdjkuXHJcbiAqIEBuZ01vZHVsZSBGb3Jtc01vZHVsZVxyXG4gKiBAcHVibGljQXBpXHJcbiAqL1xyXG52YXIgTmdGb3JtU2VsZWN0b3JXYXJuaW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTmdGb3JtU2VsZWN0b3JXYXJuaW5nKG5nRm9ybVdhcm5pbmcpIHtcclxuICAgICAgICBpZiAoKCghbmdGb3JtV2FybmluZyB8fCBuZ0Zvcm1XYXJuaW5nID09PSAnb25jZScpICYmICFOZ0Zvcm1TZWxlY3Rvcldhcm5pbmdfMS5fbmdGb3JtV2FybmluZykgfHxcclxuICAgICAgICAgICAgbmdGb3JtV2FybmluZyA9PT0gJ2Fsd2F5cycpIHtcclxuICAgICAgICAgICAgVGVtcGxhdGVEcml2ZW5FcnJvcnMubmdGb3JtV2FybmluZygpO1xyXG4gICAgICAgICAgICBOZ0Zvcm1TZWxlY3Rvcldhcm5pbmdfMS5fbmdGb3JtV2FybmluZyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgTmdGb3JtU2VsZWN0b3JXYXJuaW5nXzEgPSBOZ0Zvcm1TZWxlY3Rvcldhcm5pbmc7XHJcbiAgICB2YXIgTmdGb3JtU2VsZWN0b3JXYXJuaW5nXzE7XHJcbiAgICAvKipcclxuICAgICAqIFN0YXRpYyBwcm9wZXJ0eSB1c2VkIHRvIHRyYWNrIHdoZXRoZXIgdGhlIGRlcHJlY2F0aW9uIHdhcm5pbmcgZm9yIHRoaXMgc2VsZWN0b3IgaGFzIGJlZW4gc2VudC5cclxuICAgICAqIFVzZWQgdG8gc3VwcG9ydCB3YXJuaW5nIGNvbmZpZyBvZiBcIm9uY2VcIi5cclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgTmdGb3JtU2VsZWN0b3JXYXJuaW5nLl9uZ0Zvcm1XYXJuaW5nID0gZmFsc2U7XHJcbiAgICBOZ0Zvcm1TZWxlY3Rvcldhcm5pbmcgPSBOZ0Zvcm1TZWxlY3Rvcldhcm5pbmdfMSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgRGlyZWN0aXZlKHsgc2VsZWN0b3I6ICduZ0Zvcm0nIH0pLFxyXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgwLCBPcHRpb25hbCgpKSwgdHNsaWJfMS5fX3BhcmFtKDAsIEluamVjdChOR19GT1JNX1NFTEVDVE9SX1dBUk5JTkcpKSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0XSlcclxuICAgIF0sIE5nRm9ybVNlbGVjdG9yV2FybmluZyk7XHJcbiAgICByZXR1cm4gTmdGb3JtU2VsZWN0b3JXYXJuaW5nO1xyXG59KCkpO1xyXG5leHBvcnQgeyBOZ0Zvcm1TZWxlY3Rvcldhcm5pbmcgfTtcciJdfQ==