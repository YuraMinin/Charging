/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { Compiler, Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
function unimplemented() {
    throw Error('unimplemented');
}
/**
 * Special interface to the compiler only used by testing
 *
 * @publicApi
 */
var TestingCompiler = /** @class */ (function (_super) {
    tslib_1.__extends(TestingCompiler, _super);
    function TestingCompiler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TestingCompiler.prototype, "injector", {
        get: function () { throw unimplemented(); },
        enumerable: true,
        configurable: true
    });
    TestingCompiler.prototype.overrideModule = function (module, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overrideDirective = function (directive, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overrideComponent = function (component, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overridePipe = function (directive, overrides) {
        throw unimplemented();
    };
    /**
     * Allows to pass the compile summary from AOT compilation to the JIT compiler,
     * so that it can use the code generated by AOT.
     */
    TestingCompiler.prototype.loadAotSummaries = function (summaries) { throw unimplemented(); };
    /**
     * Gets the component factory for the given component.
     * This assumes that the component has been compiled before calling this call using
     * `compileModuleAndAllComponents*`.
     */
    TestingCompiler.prototype.getComponentFactory = function (component) { throw unimplemented(); };
    /**
     * Returns the component type that is stored in the given error.
     * This can be used for errors created by compileModule...
     */
    TestingCompiler.prototype.getComponentFromError = function (error) { throw unimplemented(); };
TestingCompiler.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TestingCompiler, factory: function TestingCompiler_Factory(t) { return ɵTestingCompiler_BaseFactory(t || TestingCompiler); }, providedIn: null });
const ɵTestingCompiler_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TestingCompiler);
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TestingCompiler, [{
        type: Injectable
    }], null, { injector: [], overrideModule: [], overrideDirective: [], overrideComponent: [], overridePipe: [], loadAotSummaries: [], getComponentFactory: [], getComponentFromError: [] });
    return TestingCompiler;
}(Compiler));
export { TestingCompiler };
/**
 * A factory for creating a Compiler
 *
 * @publicApi
 */
var TestingCompilerFactory = /** @class */ (function () {
    function TestingCompilerFactory() {
    }
    return TestingCompilerFactory;
}());
export { TestingCompilerFactory };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L1Byb2plY3RzL1Rlc3RQcm9qZWN0L0NoYXJnaW5nL0NoYXJnaW5nL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYW5ndWxhci9jb3JlL2VzbTUvdGVzdGluZy9zcmMvdGVzdF9jb21waWxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQVNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0dBNkNrRzs7Ozs7OExBRzFFIiwiZmlsZSI6InRlc3RfY29tcGlsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXHJcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcclxuICovXHJcbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IENvbXBpbGVyLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmZ1bmN0aW9uIHVuaW1wbGVtZW50ZWQoKSB7XHJcbiAgICB0aHJvdyBFcnJvcigndW5pbXBsZW1lbnRlZCcpO1xyXG59XHJcbi8qKlxyXG4gKiBTcGVjaWFsIGludGVyZmFjZSB0byB0aGUgY29tcGlsZXIgb25seSB1c2VkIGJ5IHRlc3RpbmdcclxuICpcclxuICogQHB1YmxpY0FwaVxyXG4gKi9cclxudmFyIFRlc3RpbmdDb21waWxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKFRlc3RpbmdDb21waWxlciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFRlc3RpbmdDb21waWxlcigpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGVzdGluZ0NvbXBpbGVyLnByb3RvdHlwZSwgXCJpbmplY3RvclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHRocm93IHVuaW1wbGVtZW50ZWQoKTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBUZXN0aW5nQ29tcGlsZXIucHJvdG90eXBlLm92ZXJyaWRlTW9kdWxlID0gZnVuY3Rpb24gKG1vZHVsZSwgb3ZlcnJpZGVzKSB7XHJcbiAgICAgICAgdGhyb3cgdW5pbXBsZW1lbnRlZCgpO1xyXG4gICAgfTtcclxuICAgIFRlc3RpbmdDb21waWxlci5wcm90b3R5cGUub3ZlcnJpZGVEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZGlyZWN0aXZlLCBvdmVycmlkZXMpIHtcclxuICAgICAgICB0aHJvdyB1bmltcGxlbWVudGVkKCk7XHJcbiAgICB9O1xyXG4gICAgVGVzdGluZ0NvbXBpbGVyLnByb3RvdHlwZS5vdmVycmlkZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnQsIG92ZXJyaWRlcykge1xyXG4gICAgICAgIHRocm93IHVuaW1wbGVtZW50ZWQoKTtcclxuICAgIH07XHJcbiAgICBUZXN0aW5nQ29tcGlsZXIucHJvdG90eXBlLm92ZXJyaWRlUGlwZSA9IGZ1bmN0aW9uIChkaXJlY3RpdmUsIG92ZXJyaWRlcykge1xyXG4gICAgICAgIHRocm93IHVuaW1wbGVtZW50ZWQoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFsbG93cyB0byBwYXNzIHRoZSBjb21waWxlIHN1bW1hcnkgZnJvbSBBT1QgY29tcGlsYXRpb24gdG8gdGhlIEpJVCBjb21waWxlcixcclxuICAgICAqIHNvIHRoYXQgaXQgY2FuIHVzZSB0aGUgY29kZSBnZW5lcmF0ZWQgYnkgQU9ULlxyXG4gICAgICovXHJcbiAgICBUZXN0aW5nQ29tcGlsZXIucHJvdG90eXBlLmxvYWRBb3RTdW1tYXJpZXMgPSBmdW5jdGlvbiAoc3VtbWFyaWVzKSB7IHRocm93IHVuaW1wbGVtZW50ZWQoKTsgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgY29tcG9uZW50IGZhY3RvcnkgZm9yIHRoZSBnaXZlbiBjb21wb25lbnQuXHJcbiAgICAgKiBUaGlzIGFzc3VtZXMgdGhhdCB0aGUgY29tcG9uZW50IGhhcyBiZWVuIGNvbXBpbGVkIGJlZm9yZSBjYWxsaW5nIHRoaXMgY2FsbCB1c2luZ1xyXG4gICAgICogYGNvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzKmAuXHJcbiAgICAgKi9cclxuICAgIFRlc3RpbmdDb21waWxlci5wcm90b3R5cGUuZ2V0Q29tcG9uZW50RmFjdG9yeSA9IGZ1bmN0aW9uIChjb21wb25lbnQpIHsgdGhyb3cgdW5pbXBsZW1lbnRlZCgpOyB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBjb21wb25lbnQgdHlwZSB0aGF0IGlzIHN0b3JlZCBpbiB0aGUgZ2l2ZW4gZXJyb3IuXHJcbiAgICAgKiBUaGlzIGNhbiBiZSB1c2VkIGZvciBlcnJvcnMgY3JlYXRlZCBieSBjb21waWxlTW9kdWxlLi4uXHJcbiAgICAgKi9cclxuICAgIFRlc3RpbmdDb21waWxlci5wcm90b3R5cGUuZ2V0Q29tcG9uZW50RnJvbUVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7IHRocm93IHVuaW1wbGVtZW50ZWQoKTsgfTtcclxuICAgIFRlc3RpbmdDb21waWxlciA9IHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5qZWN0YWJsZSgpXHJcbiAgICBdLCBUZXN0aW5nQ29tcGlsZXIpO1xyXG4gICAgcmV0dXJuIFRlc3RpbmdDb21waWxlcjtcclxufShDb21waWxlcikpO1xyXG5leHBvcnQgeyBUZXN0aW5nQ29tcGlsZXIgfTtcclxuLyoqXHJcbiAqIEEgZmFjdG9yeSBmb3IgY3JlYXRpbmcgYSBDb21waWxlclxyXG4gKlxyXG4gKiBAcHVibGljQXBpXHJcbiAqL1xyXG52YXIgVGVzdGluZ0NvbXBpbGVyRmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRlc3RpbmdDb21waWxlckZhY3RvcnkoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gVGVzdGluZ0NvbXBpbGVyRmFjdG9yeTtcclxufSgpKTtcclxuZXhwb3J0IHsgVGVzdGluZ0NvbXBpbGVyRmFjdG9yeSB9O1xyIl19