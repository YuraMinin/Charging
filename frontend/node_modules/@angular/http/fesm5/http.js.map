{"version":3,"sources":["d:/Projects/TestProject/Charging/Charging/frontend/node_modules/@angular/http/fesm5/http.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;6BAI6B,AACR;;;;;;mDAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAsYmB,AACjB;;;;;;0CAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoctB;;;;8JAGe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAuHU,AACV;;;;;;+GAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAwNQ,AACR;;;;;;;mMAGF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCAgLkB,AAChB;;;;;;0CAEM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBA4UJ,AACF;;;;;;uNAER;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBA2CW,AACH;;;;;;0GAEP;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4BT;;;;;;;;;;;;;;;;;;;;;;;;;;SAcc;;;;;;;;;;;KAWd;;;;;;;;;;;;;;;;;;;;;;;;SAae","file":"http.js","sourcesContent":["/**\r\n * @license Angular v7.2.15\r\n * (c) 2010-2019 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { __decorate, __metadata, __spread, __extends, __read } from 'tslib';\r\nimport { Injectable, NgModule, Version } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ÉµgetDOM } from '@angular/platform-browser';\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A backend for http that uses the `XMLHttpRequest` browser API.\r\n *\r\n * Take care not to evaluate this in non-browser contexts.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar BrowserXhr = /** @class */ (function () {\r\n    function BrowserXhr() {\r\n    }\r\n    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };\r\n    BrowserXhr = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [])\r\n    ], BrowserXhr);\r\n    return BrowserXhr;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Supported http methods.\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar RequestMethod;\r\n(function (RequestMethod) {\r\n    RequestMethod[RequestMethod[\"Get\"] = 0] = \"Get\";\r\n    RequestMethod[RequestMethod[\"Post\"] = 1] = \"Post\";\r\n    RequestMethod[RequestMethod[\"Put\"] = 2] = \"Put\";\r\n    RequestMethod[RequestMethod[\"Delete\"] = 3] = \"Delete\";\r\n    RequestMethod[RequestMethod[\"Options\"] = 4] = \"Options\";\r\n    RequestMethod[RequestMethod[\"Head\"] = 5] = \"Head\";\r\n    RequestMethod[RequestMethod[\"Patch\"] = 6] = \"Patch\";\r\n})(RequestMethod || (RequestMethod = {}));\r\n/**\r\n * All possible states in which a connection can be, based on\r\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\r\n * additional \"CANCELLED\" state.\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar ReadyState;\r\n(function (ReadyState) {\r\n    ReadyState[ReadyState[\"Unsent\"] = 0] = \"Unsent\";\r\n    ReadyState[ReadyState[\"Open\"] = 1] = \"Open\";\r\n    ReadyState[ReadyState[\"HeadersReceived\"] = 2] = \"HeadersReceived\";\r\n    ReadyState[ReadyState[\"Loading\"] = 3] = \"Loading\";\r\n    ReadyState[ReadyState[\"Done\"] = 4] = \"Done\";\r\n    ReadyState[ReadyState[\"Cancelled\"] = 5] = \"Cancelled\";\r\n})(ReadyState || (ReadyState = {}));\r\n/**\r\n * Acceptable response types to be associated with a {@link Response}, based on\r\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar ResponseType;\r\n(function (ResponseType) {\r\n    ResponseType[ResponseType[\"Basic\"] = 0] = \"Basic\";\r\n    ResponseType[ResponseType[\"Cors\"] = 1] = \"Cors\";\r\n    ResponseType[ResponseType[\"Default\"] = 2] = \"Default\";\r\n    ResponseType[ResponseType[\"Error\"] = 3] = \"Error\";\r\n    ResponseType[ResponseType[\"Opaque\"] = 4] = \"Opaque\";\r\n})(ResponseType || (ResponseType = {}));\r\n/**\r\n * Supported content type to be automatically associated with a {@link Request}.\r\n * @deprecated see https://angular.io/guide/http\r\n */\r\nvar ContentType;\r\n(function (ContentType) {\r\n    ContentType[ContentType[\"NONE\"] = 0] = \"NONE\";\r\n    ContentType[ContentType[\"JSON\"] = 1] = \"JSON\";\r\n    ContentType[ContentType[\"FORM\"] = 2] = \"FORM\";\r\n    ContentType[ContentType[\"FORM_DATA\"] = 3] = \"FORM_DATA\";\r\n    ContentType[ContentType[\"TEXT\"] = 4] = \"TEXT\";\r\n    ContentType[ContentType[\"BLOB\"] = 5] = \"BLOB\";\r\n    ContentType[ContentType[\"ARRAY_BUFFER\"] = 6] = \"ARRAY_BUFFER\";\r\n})(ContentType || (ContentType = {}));\r\n/**\r\n * Define which buffer to use to store the response\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar ResponseContentType;\r\n(function (ResponseContentType) {\r\n    ResponseContentType[ResponseContentType[\"Text\"] = 0] = \"Text\";\r\n    ResponseContentType[ResponseContentType[\"Json\"] = 1] = \"Json\";\r\n    ResponseContentType[ResponseContentType[\"ArrayBuffer\"] = 2] = \"ArrayBuffer\";\r\n    ResponseContentType[ResponseContentType[\"Blob\"] = 3] = \"Blob\";\r\n})(ResponseContentType || (ResponseContentType = {}));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\r\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\r\n *\r\n * The only known difference between this `Headers` implementation and the spec is the\r\n * lack of an `entries` method.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```\r\n * import {Headers} from '@angular/http';\r\n *\r\n * var firstHeaders = new Headers();\r\n * firstHeaders.append('Content-Type', 'image/jpeg');\r\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\r\n *\r\n * // Create headers from Plain Old JavaScript Object\r\n * var secondHeaders = new Headers({\r\n *   'X-My-Custom-Header': 'Angular'\r\n * });\r\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\r\n *\r\n * var thirdHeaders = new Headers(secondHeaders);\r\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar Headers = /** @class */ (function () {\r\n    // TODO(vicb): any -> string|string[]\r\n    function Headers(headers) {\r\n        var _this = this;\r\n        /** @internal header names are lower case */\r\n        this._headers = new Map();\r\n        /** @internal map lower case names to actual names */\r\n        this._normalizedNames = new Map();\r\n        if (!headers) {\r\n            return;\r\n        }\r\n        if (headers instanceof Headers) {\r\n            headers.forEach(function (values, name) {\r\n                values.forEach(function (value) { return _this.append(name, value); });\r\n            });\r\n            return;\r\n        }\r\n        Object.keys(headers).forEach(function (name) {\r\n            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\r\n            _this.delete(name);\r\n            values.forEach(function (value) { return _this.append(name, value); });\r\n        });\r\n    }\r\n    /**\r\n     * Returns a new Headers instance from the given DOMString of Response Headers\r\n     */\r\n    Headers.fromResponseHeaderString = function (headersString) {\r\n        var headers = new Headers();\r\n        headersString.split('\\n').forEach(function (line) {\r\n            var index = line.indexOf(':');\r\n            if (index > 0) {\r\n                var name_1 = line.slice(0, index);\r\n                var value = line.slice(index + 1).trim();\r\n                headers.set(name_1, value);\r\n            }\r\n        });\r\n        return headers;\r\n    };\r\n    /**\r\n     * Appends a header to existing list of header values for a given header name.\r\n     */\r\n    Headers.prototype.append = function (name, value) {\r\n        var values = this.getAll(name);\r\n        if (values === null) {\r\n            this.set(name, value);\r\n        }\r\n        else {\r\n            values.push(value);\r\n        }\r\n    };\r\n    /**\r\n     * Deletes all header values for the given name.\r\n     */\r\n    Headers.prototype.delete = function (name) {\r\n        var lcName = name.toLowerCase();\r\n        this._normalizedNames.delete(lcName);\r\n        this._headers.delete(lcName);\r\n    };\r\n    Headers.prototype.forEach = function (fn) {\r\n        var _this = this;\r\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\r\n    };\r\n    /**\r\n     * Returns first header that matches given name.\r\n     */\r\n    Headers.prototype.get = function (name) {\r\n        var values = this.getAll(name);\r\n        if (values === null) {\r\n            return null;\r\n        }\r\n        return values.length > 0 ? values[0] : null;\r\n    };\r\n    /**\r\n     * Checks for existence of header by given name.\r\n     */\r\n    Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };\r\n    /**\r\n     * Returns the names of the headers\r\n     */\r\n    Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };\r\n    /**\r\n     * Sets or overrides header value for given name.\r\n     */\r\n    Headers.prototype.set = function (name, value) {\r\n        if (Array.isArray(value)) {\r\n            if (value.length) {\r\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\r\n            }\r\n        }\r\n        else {\r\n            this._headers.set(name.toLowerCase(), [value]);\r\n        }\r\n        this.mayBeSetNormalizedName(name);\r\n    };\r\n    /**\r\n     * Returns values of all headers.\r\n     */\r\n    Headers.prototype.values = function () { return Array.from(this._headers.values()); };\r\n    /**\r\n     * Returns string of all headers.\r\n     */\r\n    // TODO(vicb): returns {[name: string]: string[]}\r\n    Headers.prototype.toJSON = function () {\r\n        var _this = this;\r\n        var serialized = {};\r\n        this._headers.forEach(function (values, name) {\r\n            var split = [];\r\n            values.forEach(function (v) { return split.push.apply(split, __spread(v.split(','))); });\r\n            serialized[_this._normalizedNames.get(name)] = split;\r\n        });\r\n        return serialized;\r\n    };\r\n    /**\r\n     * Returns list of header values for a given name.\r\n     */\r\n    Headers.prototype.getAll = function (name) {\r\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\r\n    };\r\n    /**\r\n     * This method is not implemented.\r\n     */\r\n    Headers.prototype.entries = function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\r\n    Headers.prototype.mayBeSetNormalizedName = function (name) {\r\n        var lcName = name.toLowerCase();\r\n        if (!this._normalizedNames.has(lcName)) {\r\n            this._normalizedNames.set(lcName, name);\r\n        }\r\n    };\r\n    return Headers;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Creates a response options object to be optionally provided when instantiating a\r\n * {@link Response}.\r\n *\r\n * This class is based on the `ResponseInit` description in the [Fetch\r\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\r\n *\r\n * All values are null by default. Typical defaults can be found in the\r\n * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\r\n *\r\n * This class may be used in tests to build {@link Response Responses} for\r\n * mock responses (see {@link MockBackend}).\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import {ResponseOptions, Response} from '@angular/http';\r\n *\r\n * var options = new ResponseOptions({\r\n *   body: '{\"name\":\"Jeff\"}'\r\n * });\r\n * var res = new Response(options);\r\n *\r\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar ResponseOptions = /** @class */ (function () {\r\n    function ResponseOptions(opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\r\n        this.body = body != null ? body : null;\r\n        this.status = status != null ? status : null;\r\n        this.headers = headers != null ? headers : null;\r\n        this.statusText = statusText != null ? statusText : null;\r\n        this.type = type != null ? type : null;\r\n        this.url = url != null ? url : null;\r\n    }\r\n    /**\r\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\r\n     * override\r\n     * existing values. This method will not change the values of the instance on which it is being\r\n     * called.\r\n     *\r\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\r\n     * where certain properties may change from test to test.\r\n     *\r\n     * @usageNotes\r\n     * ### Example\r\n     *\r\n     * ```typescript\r\n     * import {ResponseOptions, Response} from '@angular/http';\r\n     *\r\n     * var options = new ResponseOptions({\r\n     *   body: {name: 'Jeff'}\r\n     * });\r\n     * var res = new Response(options.merge({\r\n     *   url: 'https://google.com'\r\n     * }));\r\n     * console.log('options.url:', options.url); // null\r\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\r\n     * console.log('res.url:', res.url); // https://google.com\r\n     * ```\r\n     */\r\n    ResponseOptions.prototype.merge = function (options) {\r\n        return new ResponseOptions({\r\n            body: options && options.body != null ? options.body : this.body,\r\n            status: options && options.status != null ? options.status : this.status,\r\n            headers: options && options.headers != null ? options.headers : this.headers,\r\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\r\n            type: options && options.type != null ? options.type : this.type,\r\n            url: options && options.url != null ? options.url : this.url,\r\n        });\r\n    };\r\n    return ResponseOptions;\r\n}());\r\n/**\r\n * Subclass of {@link ResponseOptions}, with default values.\r\n *\r\n * Default values:\r\n *  * status: 200\r\n *  * headers: empty {@link Headers} object\r\n *\r\n * This class could be extended and bound to the {@link ResponseOptions} class\r\n * when configuring an {@link Injector}, in order to override the default options\r\n * used by {@link Http} to create {@link Response Responses}.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import {provide} from '@angular/core';\r\n * import {bootstrap} from '@angular/platform-browser/browser';\r\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\r\n * '@angular/http';\r\n * import {App} from './myapp';\r\n *\r\n * class MyOptions extends BaseResponseOptions {\r\n *   headers:Headers = new Headers({network: 'github'});\r\n * }\r\n *\r\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\r\n * ```\r\n *\r\n * The options could also be extended when manually creating a {@link Response}\r\n * object.\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * import {BaseResponseOptions, Response} from '@angular/http';\r\n *\r\n * var options = new BaseResponseOptions();\r\n * var res = new Response(options.merge({\r\n *   body: 'Angular',\r\n *   headers: new Headers({framework: 'angular'})\r\n * }));\r\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\r\n * console.log('res.text():', res.text()); // Angular;\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar BaseResponseOptions = /** @class */ (function (_super) {\r\n    __extends(BaseResponseOptions, _super);\r\n    function BaseResponseOptions() {\r\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\r\n    }\r\n    BaseResponseOptions = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [])\r\n    ], BaseResponseOptions);\r\n    return BaseResponseOptions;\r\n}(ResponseOptions));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Abstract class from which real backends are derived.\r\n *\r\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\r\n * {@link Request}.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar ConnectionBackend = /** @class */ (function () {\r\n    function ConnectionBackend() {\r\n    }\r\n    return ConnectionBackend;\r\n}());\r\n/**\r\n * Abstract class from which real connections are derived.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar Connection = /** @class */ (function () {\r\n    function Connection() {\r\n    }\r\n    return Connection;\r\n}());\r\n/**\r\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar XSRFStrategy = /** @class */ (function () {\r\n    function XSRFStrategy() {\r\n    }\r\n    return XSRFStrategy;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction normalizeMethodName(method) {\r\n    if (typeof method !== 'string')\r\n        return method;\r\n    switch (method.toUpperCase()) {\r\n        case 'GET':\r\n            return RequestMethod.Get;\r\n        case 'POST':\r\n            return RequestMethod.Post;\r\n        case 'PUT':\r\n            return RequestMethod.Put;\r\n        case 'DELETE':\r\n            return RequestMethod.Delete;\r\n        case 'OPTIONS':\r\n            return RequestMethod.Options;\r\n        case 'HEAD':\r\n            return RequestMethod.Head;\r\n        case 'PATCH':\r\n            return RequestMethod.Patch;\r\n    }\r\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\r\n}\r\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\r\nfunction getResponseURL(xhr) {\r\n    if ('responseURL' in xhr) {\r\n        return xhr.responseURL;\r\n    }\r\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\r\n        return xhr.getResponseHeader('X-Request-URL');\r\n    }\r\n    return null;\r\n}\r\nfunction stringToArrayBuffer(input) {\r\n    var view = new Uint16Array(input.length);\r\n    for (var i = 0, strLen = input.length; i < strLen; i++) {\r\n        view[i] = input.charCodeAt(i);\r\n    }\r\n    return view.buffer;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction paramParser(rawParams) {\r\n    if (rawParams === void 0) { rawParams = ''; }\r\n    var map = new Map();\r\n    if (rawParams.length > 0) {\r\n        var params = rawParams.split('&');\r\n        params.forEach(function (param) {\r\n            var eqIdx = param.indexOf('=');\r\n            var _a = __read(eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], 2), key = _a[0], val = _a[1];\r\n            var list = map.get(key) || [];\r\n            list.push(val);\r\n            map.set(key, list);\r\n        });\r\n    }\r\n    return map;\r\n}\r\n/**\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n **/\r\nvar QueryEncoder = /** @class */ (function () {\r\n    function QueryEncoder() {\r\n    }\r\n    QueryEncoder.prototype.encodeKey = function (key) { return standardEncoding(key); };\r\n    QueryEncoder.prototype.encodeValue = function (value) { return standardEncoding(value); };\r\n    return QueryEncoder;\r\n}());\r\nfunction standardEncoding(v) {\r\n    return encodeURIComponent(v)\r\n        .replace(/%40/gi, '@')\r\n        .replace(/%3A/gi, ':')\r\n        .replace(/%24/gi, '$')\r\n        .replace(/%2C/gi, ',')\r\n        .replace(/%3B/gi, ';')\r\n        .replace(/%2B/gi, '+')\r\n        .replace(/%3D/gi, '=')\r\n        .replace(/%3F/gi, '?')\r\n        .replace(/%2F/gi, '/');\r\n}\r\n/**\r\n * Map-like representation of url search parameters, based on\r\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\r\n * with several extensions for merging URLSearchParams objects:\r\n *   - setAll()\r\n *   - appendAll()\r\n *   - replaceAll()\r\n *\r\n * This class accepts an optional second parameter of ${@link QueryEncoder},\r\n * which is used to serialize parameters before making a request. By default,\r\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\r\n * and then un-encodes certain characters that are allowed to be part of the query\r\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\r\n *\r\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\r\n *\r\n * If the set of allowed query characters is not acceptable for a particular backend,\r\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\r\n *\r\n * ```\r\n * import {URLSearchParams, QueryEncoder} from '@angular/http';\r\n * class MyQueryEncoder extends QueryEncoder {\r\n *   encodeKey(k: string): string {\r\n *     return myEncodingFunction(k);\r\n *   }\r\n *\r\n *   encodeValue(v: string): string {\r\n *     return myEncodingFunction(v);\r\n *   }\r\n * }\r\n *\r\n * let params = new URLSearchParams('', new MyQueryEncoder());\r\n * ```\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar URLSearchParams = /** @class */ (function () {\r\n    function URLSearchParams(rawParams, queryEncoder) {\r\n        if (rawParams === void 0) { rawParams = ''; }\r\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\r\n        this.rawParams = rawParams;\r\n        this.queryEncoder = queryEncoder;\r\n        this.paramsMap = paramParser(rawParams);\r\n    }\r\n    URLSearchParams.prototype.clone = function () {\r\n        var clone = new URLSearchParams('', this.queryEncoder);\r\n        clone.appendAll(this);\r\n        return clone;\r\n    };\r\n    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\r\n    URLSearchParams.prototype.get = function (param) {\r\n        var storedParam = this.paramsMap.get(param);\r\n        return Array.isArray(storedParam) ? storedParam[0] : null;\r\n    };\r\n    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\r\n    URLSearchParams.prototype.set = function (param, val) {\r\n        if (val === void 0 || val === null) {\r\n            this.delete(param);\r\n            return;\r\n        }\r\n        var list = this.paramsMap.get(param) || [];\r\n        list.length = 0;\r\n        list.push(val);\r\n        this.paramsMap.set(param, list);\r\n    };\r\n    // A merge operation\r\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\r\n    //\r\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\r\n    //\r\n    // TODO(@caitp): document this better\r\n    URLSearchParams.prototype.setAll = function (searchParams) {\r\n        var _this = this;\r\n        searchParams.paramsMap.forEach(function (value, param) {\r\n            var list = _this.paramsMap.get(param) || [];\r\n            list.length = 0;\r\n            list.push(value[0]);\r\n            _this.paramsMap.set(param, list);\r\n        });\r\n    };\r\n    URLSearchParams.prototype.append = function (param, val) {\r\n        if (val === void 0 || val === null)\r\n            return;\r\n        var list = this.paramsMap.get(param) || [];\r\n        list.push(val);\r\n        this.paramsMap.set(param, list);\r\n    };\r\n    // A merge operation\r\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\r\n    // for each value in `values`.\r\n    //\r\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\r\n    //\r\n    // TODO(@caitp): document this better\r\n    URLSearchParams.prototype.appendAll = function (searchParams) {\r\n        var _this = this;\r\n        searchParams.paramsMap.forEach(function (value, param) {\r\n            var list = _this.paramsMap.get(param) || [];\r\n            for (var i = 0; i < value.length; ++i) {\r\n                list.push(value[i]);\r\n            }\r\n            _this.paramsMap.set(param, list);\r\n        });\r\n    };\r\n    // A merge operation\r\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\r\n    // followed by `set(name, values)`\r\n    //\r\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\r\n    //\r\n    // TODO(@caitp): document this better\r\n    URLSearchParams.prototype.replaceAll = function (searchParams) {\r\n        var _this = this;\r\n        searchParams.paramsMap.forEach(function (value, param) {\r\n            var list = _this.paramsMap.get(param) || [];\r\n            list.length = 0;\r\n            for (var i = 0; i < value.length; ++i) {\r\n                list.push(value[i]);\r\n            }\r\n            _this.paramsMap.set(param, list);\r\n        });\r\n    };\r\n    URLSearchParams.prototype.toString = function () {\r\n        var _this = this;\r\n        var paramsList = [];\r\n        this.paramsMap.forEach(function (values, k) {\r\n            values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });\r\n        });\r\n        return paramsList.join('&');\r\n    };\r\n    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\r\n    return URLSearchParams;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * HTTP request body used by both {@link Request} and {@link Response}\r\n * https://fetch.spec.whatwg.org/#body\r\n */\r\nvar Body = /** @class */ (function () {\r\n    function Body() {\r\n    }\r\n    /**\r\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\r\n     */\r\n    Body.prototype.json = function () {\r\n        if (typeof this._body === 'string') {\r\n            return JSON.parse(this._body);\r\n        }\r\n        if (this._body instanceof ArrayBuffer) {\r\n            return JSON.parse(this.text());\r\n        }\r\n        return this._body;\r\n    };\r\n    /**\r\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\r\n     *\r\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\r\n     * bytes in the buffer will be interpreted. Valid values are:\r\n     *\r\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\r\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\r\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\r\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\r\n     *   considered deprecated.\r\n     *\r\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\r\n     */\r\n    Body.prototype.text = function (encodingHint) {\r\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\r\n        if (this._body instanceof URLSearchParams) {\r\n            return this._body.toString();\r\n        }\r\n        if (this._body instanceof ArrayBuffer) {\r\n            switch (encodingHint) {\r\n                case 'legacy':\r\n                    return String.fromCharCode.apply(null, new Uint16Array(this._body));\r\n                case 'iso-8859':\r\n                    return String.fromCharCode.apply(null, new Uint8Array(this._body));\r\n                default:\r\n                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\r\n            }\r\n        }\r\n        if (this._body == null) {\r\n            return '';\r\n        }\r\n        if (typeof this._body === 'object') {\r\n            return JSON.stringify(this._body, null, 2);\r\n        }\r\n        return this._body.toString();\r\n    };\r\n    /**\r\n     * Return the body as an ArrayBuffer\r\n     */\r\n    Body.prototype.arrayBuffer = function () {\r\n        if (this._body instanceof ArrayBuffer) {\r\n            return this._body;\r\n        }\r\n        return stringToArrayBuffer(this.text());\r\n    };\r\n    /**\r\n      * Returns the request's body as a Blob, assuming that body exists.\r\n      */\r\n    Body.prototype.blob = function () {\r\n        if (this._body instanceof Blob) {\r\n            return this._body;\r\n        }\r\n        if (this._body instanceof ArrayBuffer) {\r\n            return new Blob([this._body]);\r\n        }\r\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\r\n    };\r\n    return Body;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Creates `Response` instances from provided values.\r\n *\r\n * Though this object isn't\r\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\r\n * add data to a view.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```\r\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\r\n * ```\r\n *\r\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\r\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\r\n * can be accessed many times. There are other differences in the implementation, but this is the\r\n * most significant.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar Response = /** @class */ (function (_super) {\r\n    __extends(Response, _super);\r\n    function Response(responseOptions) {\r\n        var _this = _super.call(this) || this;\r\n        _this._body = responseOptions.body;\r\n        _this.status = responseOptions.status;\r\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\r\n        _this.statusText = responseOptions.statusText;\r\n        _this.headers = responseOptions.headers;\r\n        _this.type = responseOptions.type;\r\n        _this.url = responseOptions.url;\r\n        return _this;\r\n    }\r\n    Response.prototype.toString = function () {\r\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\r\n    };\r\n    return Response;\r\n}(Body));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar _nextRequestId = 0;\r\nvar JSONP_HOME = '__ng_jsonp__';\r\nvar _jsonpConnections = null;\r\nfunction _getJsonpConnections() {\r\n    var w = typeof window == 'object' ? window : {};\r\n    if (_jsonpConnections === null) {\r\n        _jsonpConnections = w[JSONP_HOME] = {};\r\n    }\r\n    return _jsonpConnections;\r\n}\r\n// Make sure not to evaluate this in a non-browser environment!\r\nvar BrowserJsonp = /** @class */ (function () {\r\n    function BrowserJsonp() {\r\n    }\r\n    // Construct a <script> element with the specified URL\r\n    BrowserJsonp.prototype.build = function (url) {\r\n        var node = document.createElement('script');\r\n        node.src = url;\r\n        return node;\r\n    };\r\n    BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\r\n    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\r\n    BrowserJsonp.prototype.exposeConnection = function (id, connection) {\r\n        var connections = _getJsonpConnections();\r\n        connections[id] = connection;\r\n    };\r\n    BrowserJsonp.prototype.removeConnection = function (id) {\r\n        var connections = _getJsonpConnections();\r\n        connections[id] = null;\r\n    };\r\n    // Attach the <script> element to the DOM\r\n    BrowserJsonp.prototype.send = function (node) { document.body.appendChild((node)); };\r\n    // Remove <script> element from the DOM\r\n    BrowserJsonp.prototype.cleanup = function (node) {\r\n        if (node.parentNode) {\r\n            node.parentNode.removeChild((node));\r\n        }\r\n    };\r\n    BrowserJsonp = __decorate([\r\n        Injectable()\r\n    ], BrowserJsonp);\r\n    return BrowserJsonp;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\r\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\r\n/**\r\n * Base class for an in-flight JSONP request.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar JSONPConnection = /** @class */ (function () {\r\n    /** @internal */\r\n    function JSONPConnection(req, _dom, baseResponseOptions) {\r\n        var _this = this;\r\n        this._dom = _dom;\r\n        this.baseResponseOptions = baseResponseOptions;\r\n        this._finished = false;\r\n        if (req.method !== RequestMethod.Get) {\r\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\r\n        }\r\n        this.request = req;\r\n        this.response = new Observable(function (responseObserver) {\r\n            _this.readyState = ReadyState.Loading;\r\n            var id = _this._id = _dom.nextRequestID();\r\n            _dom.exposeConnection(id, _this);\r\n            // Workaround Dart\r\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\r\n            var callback = _dom.requestCallback(_this._id);\r\n            var url = req.url;\r\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\r\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\r\n            }\r\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\r\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\r\n            }\r\n            var script = _this._script = _dom.build(url);\r\n            var onLoad = function (event) {\r\n                if (_this.readyState === ReadyState.Cancelled)\r\n                    return;\r\n                _this.readyState = ReadyState.Done;\r\n                _dom.cleanup(script);\r\n                if (!_this._finished) {\r\n                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\r\n                    if (baseResponseOptions) {\r\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\r\n                    }\r\n                    responseObserver.error(new Response(responseOptions_1));\r\n                    return;\r\n                }\r\n                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\r\n                if (_this.baseResponseOptions) {\r\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\r\n                }\r\n                responseObserver.next(new Response(responseOptions));\r\n                responseObserver.complete();\r\n            };\r\n            var onError = function (error) {\r\n                if (_this.readyState === ReadyState.Cancelled)\r\n                    return;\r\n                _this.readyState = ReadyState.Done;\r\n                _dom.cleanup(script);\r\n                var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\r\n                if (baseResponseOptions) {\r\n                    responseOptions = baseResponseOptions.merge(responseOptions);\r\n                }\r\n                responseObserver.error(new Response(responseOptions));\r\n            };\r\n            script.addEventListener('load', onLoad);\r\n            script.addEventListener('error', onError);\r\n            _dom.send(script);\r\n            return function () {\r\n                _this.readyState = ReadyState.Cancelled;\r\n                script.removeEventListener('load', onLoad);\r\n                script.removeEventListener('error', onError);\r\n                _this._dom.cleanup(script);\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Callback called when the JSONP request completes, to notify the application\r\n     * of the new data.\r\n     */\r\n    JSONPConnection.prototype.finished = function (data) {\r\n        // Don't leak connections\r\n        this._finished = true;\r\n        this._dom.removeConnection(this._id);\r\n        if (this.readyState === ReadyState.Cancelled)\r\n            return;\r\n        this._responseData = data;\r\n    };\r\n    return JSONPConnection;\r\n}());\r\n/**\r\n * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar JSONPBackend = /** @class */ (function (_super) {\r\n    __extends(JSONPBackend, _super);\r\n    /** @internal */\r\n    function JSONPBackend(_browserJSONP, _baseResponseOptions) {\r\n        var _this = _super.call(this) || this;\r\n        _this._browserJSONP = _browserJSONP;\r\n        _this._baseResponseOptions = _baseResponseOptions;\r\n        return _this;\r\n    }\r\n    JSONPBackend.prototype.createConnection = function (request) {\r\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\r\n    };\r\n    JSONPBackend = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [BrowserJsonp, ResponseOptions])\r\n    ], JSONPBackend);\r\n    return JSONPBackend;\r\n}(ConnectionBackend));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\r\n/**\r\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\r\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\r\n * request.\r\n *\r\n * This class would typically not be created or interacted with directly inside applications, though\r\n * the {@link MockConnection} may be interacted with in tests.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar XHRConnection = /** @class */ (function () {\r\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\r\n        var _this = this;\r\n        this.request = req;\r\n        this.response = new Observable(function (responseObserver) {\r\n            var _xhr = browserXHR.build();\r\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\r\n            if (req.withCredentials != null) {\r\n                _xhr.withCredentials = req.withCredentials;\r\n            }\r\n            // load event handler\r\n            var onLoad = function () {\r\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\r\n                var status = _xhr.status === 1223 ? 204 : _xhr.status;\r\n                var body = null;\r\n                // HTTP 204 means no content\r\n                if (status !== 204) {\r\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\r\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\r\n                    // (supported by IE10)\r\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\r\n                    // Implicitly strip a potential XSSI prefix.\r\n                    if (typeof body === 'string') {\r\n                        body = body.replace(XSSI_PREFIX, '');\r\n                    }\r\n                }\r\n                // fix status code when it is 0 (0 status is undocumented).\r\n                // Occurs when accessing file resources or on Android 4.1 stock browser\r\n                // while retrieving files from application cache.\r\n                if (status === 0) {\r\n                    status = body ? 200 : 0;\r\n                }\r\n                var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\r\n                // IE 9 does not provide the way to get URL of response\r\n                var url = getResponseURL(_xhr) || req.url;\r\n                var statusText = _xhr.statusText || 'OK';\r\n                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\r\n                if (baseResponseOptions != null) {\r\n                    responseOptions = baseResponseOptions.merge(responseOptions);\r\n                }\r\n                var response = new Response(responseOptions);\r\n                response.ok = isSuccess(status);\r\n                if (response.ok) {\r\n                    responseObserver.next(response);\r\n                    // TODO(gdi2290): defer complete if array buffer until done\r\n                    responseObserver.complete();\r\n                    return;\r\n                }\r\n                responseObserver.error(response);\r\n            };\r\n            // error event handler\r\n            var onError = function (err) {\r\n                var responseOptions = new ResponseOptions({\r\n                    body: err,\r\n                    type: ResponseType.Error,\r\n                    status: _xhr.status,\r\n                    statusText: _xhr.statusText,\r\n                });\r\n                if (baseResponseOptions != null) {\r\n                    responseOptions = baseResponseOptions.merge(responseOptions);\r\n                }\r\n                responseObserver.error(new Response(responseOptions));\r\n            };\r\n            _this.setDetectedContentType(req, _xhr);\r\n            if (req.headers == null) {\r\n                req.headers = new Headers();\r\n            }\r\n            if (!req.headers.has('Accept')) {\r\n                req.headers.append('Accept', 'application/json, text/plain, */*');\r\n            }\r\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\r\n            // Select the correct buffer type to store the response\r\n            if (req.responseType != null && _xhr.responseType != null) {\r\n                switch (req.responseType) {\r\n                    case ResponseContentType.ArrayBuffer:\r\n                        _xhr.responseType = 'arraybuffer';\r\n                        break;\r\n                    case ResponseContentType.Json:\r\n                        _xhr.responseType = 'json';\r\n                        break;\r\n                    case ResponseContentType.Text:\r\n                        _xhr.responseType = 'text';\r\n                        break;\r\n                    case ResponseContentType.Blob:\r\n                        _xhr.responseType = 'blob';\r\n                        break;\r\n                    default:\r\n                        throw new Error('The selected responseType is not supported');\r\n                }\r\n            }\r\n            _xhr.addEventListener('load', onLoad);\r\n            _xhr.addEventListener('error', onError);\r\n            _xhr.send(_this.request.getBody());\r\n            return function () {\r\n                _xhr.removeEventListener('load', onLoad);\r\n                _xhr.removeEventListener('error', onError);\r\n                _xhr.abort();\r\n            };\r\n        });\r\n    }\r\n    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\r\n        // Skip if a custom Content-Type header is provided\r\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\r\n            return;\r\n        }\r\n        // Set the detected content type\r\n        switch (req.contentType) {\r\n            case ContentType.NONE:\r\n                break;\r\n            case ContentType.JSON:\r\n                _xhr.setRequestHeader('content-type', 'application/json');\r\n                break;\r\n            case ContentType.FORM:\r\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\r\n                break;\r\n            case ContentType.TEXT:\r\n                _xhr.setRequestHeader('content-type', 'text/plain');\r\n                break;\r\n            case ContentType.BLOB:\r\n                var blob = req.blob();\r\n                if (blob.type) {\r\n                    _xhr.setRequestHeader('content-type', blob.type);\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    return XHRConnection;\r\n}());\r\n/**\r\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\r\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\r\n * for more information on XSRF.\r\n *\r\n * Applications can configure custom cookie and header names by binding an instance of this class\r\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\r\n * details.\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar CookieXSRFStrategy = /** @class */ (function () {\r\n    function CookieXSRFStrategy(_cookieName, _headerName) {\r\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\r\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\r\n        this._cookieName = _cookieName;\r\n        this._headerName = _headerName;\r\n    }\r\n    CookieXSRFStrategy.prototype.configureRequest = function (req) {\r\n        var xsrfToken = ÉµgetDOM().getCookie(this._cookieName);\r\n        if (xsrfToken) {\r\n            req.headers.set(this._headerName, xsrfToken);\r\n        }\r\n    };\r\n    return CookieXSRFStrategy;\r\n}());\r\n/**\r\n * Creates {@link XHRConnection} instances.\r\n *\r\n * This class would typically not be used by end users, but could be\r\n * overridden if a different backend implementation should be used,\r\n * such as in a node backend.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```\r\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\r\n * @Component({\r\n *   viewProviders: [\r\n *     HTTP_PROVIDERS,\r\n *     {provide: Http, useFactory: (backend, options) => {\r\n *       return new Http(backend, options);\r\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\r\n * })\r\n * class MyComponent {\r\n *   constructor(http:Http) {\r\n *     http.request('people.json').subscribe(res => this.people = res.json());\r\n *   }\r\n * }\r\n * ```\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar XHRBackend = /** @class */ (function () {\r\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\r\n        this._browserXHR = _browserXHR;\r\n        this._baseResponseOptions = _baseResponseOptions;\r\n        this._xsrfStrategy = _xsrfStrategy;\r\n    }\r\n    XHRBackend.prototype.createConnection = function (request) {\r\n        this._xsrfStrategy.configureRequest(request);\r\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\r\n    };\r\n    XHRBackend = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [BrowserXhr, ResponseOptions,\r\n            XSRFStrategy])\r\n    ], XHRBackend);\r\n    return XHRBackend;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Creates a request options object to be optionally provided when instantiating a\r\n * {@link Request}.\r\n *\r\n * This class is based on the `RequestInit` description in the [Fetch\r\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\r\n *\r\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\r\n * class, which sub-classes `RequestOptions`.\r\n *\r\n * ```typescript\r\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\r\n *\r\n * const options = new RequestOptions({\r\n *   method: RequestMethod.Post,\r\n *   url: 'https://google.com'\r\n * });\r\n * const req = new Request(options);\r\n * console.log('req.method:', RequestMethod[req.method]); // Post\r\n * console.log('options.url:', options.url); // https://google.com\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar RequestOptions = /** @class */ (function () {\r\n    // TODO(Dzmitry): remove search when this.search is removed\r\n    function RequestOptions(opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\r\n        this.method = method != null ? normalizeMethodName(method) : null;\r\n        this.headers = headers != null ? headers : null;\r\n        this.body = body != null ? body : null;\r\n        this.url = url != null ? url : null;\r\n        this.params = this._mergeSearchParams(params || search);\r\n        this.withCredentials = withCredentials != null ? withCredentials : null;\r\n        this.responseType = responseType != null ? responseType : null;\r\n    }\r\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\r\n        /**\r\n         * @deprecated from 4.0.0. Use params instead.\r\n         */\r\n        get: function () { return this.params; },\r\n        /**\r\n         * @deprecated from 4.0.0. Use params instead.\r\n         */\r\n        set: function (params) { this.params = params; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\r\n     * existing values. This method will not change the values of the instance on which it is being\r\n     * called.\r\n     *\r\n     * Note that `headers` and `search` will override existing values completely if present in\r\n     * the `options` object. If these values should be merged, it should be done prior to calling\r\n     * `merge` on the `RequestOptions` instance.\r\n     *\r\n     * ```typescript\r\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\r\n     *\r\n     * const options = new RequestOptions({\r\n     *   method: RequestMethod.Post\r\n     * });\r\n     * const req = new Request(options.merge({\r\n     *   url: 'https://google.com'\r\n     * }));\r\n     * console.log('req.method:', RequestMethod[req.method]); // Post\r\n     * console.log('options.url:', options.url); // null\r\n     * console.log('req.url:', req.url); // https://google.com\r\n     * ```\r\n     */\r\n    RequestOptions.prototype.merge = function (options) {\r\n        return new RequestOptions({\r\n            method: options && options.method != null ? options.method : this.method,\r\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\r\n            body: options && options.body != null ? options.body : this.body,\r\n            url: options && options.url != null ? options.url : this.url,\r\n            params: options && this._mergeSearchParams(options.params || options.search),\r\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\r\n                this.withCredentials,\r\n            responseType: options && options.responseType != null ? options.responseType :\r\n                this.responseType\r\n        });\r\n    };\r\n    RequestOptions.prototype._mergeSearchParams = function (params) {\r\n        if (!params)\r\n            return this.params;\r\n        if (params instanceof URLSearchParams) {\r\n            return params.clone();\r\n        }\r\n        if (typeof params === 'string') {\r\n            return new URLSearchParams(params);\r\n        }\r\n        return this._parseParams(params);\r\n    };\r\n    RequestOptions.prototype._parseParams = function (objParams) {\r\n        var _this = this;\r\n        if (objParams === void 0) { objParams = {}; }\r\n        var params = new URLSearchParams();\r\n        Object.keys(objParams).forEach(function (key) {\r\n            var value = objParams[key];\r\n            if (Array.isArray(value)) {\r\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\r\n            }\r\n            else {\r\n                _this._appendParam(key, value, params);\r\n            }\r\n        });\r\n        return params;\r\n    };\r\n    RequestOptions.prototype._appendParam = function (key, value, params) {\r\n        if (typeof value !== 'string') {\r\n            value = JSON.stringify(value);\r\n        }\r\n        params.append(key, value);\r\n    };\r\n    return RequestOptions;\r\n}());\r\n/**\r\n * Subclass of {@link RequestOptions}, with default values.\r\n *\r\n * Default values:\r\n *  * method: {@link RequestMethod RequestMethod.Get}\r\n *  * headers: empty {@link Headers} object\r\n *\r\n * This class could be extended and bound to the {@link RequestOptions} class\r\n * when configuring an {@link Injector}, in order to override the default options\r\n * used by {@link Http} to create and send {@link Request Requests}.\r\n *\r\n * ```typescript\r\n * import {BaseRequestOptions, RequestOptions} from '@angular/http';\r\n *\r\n * class MyOptions extends BaseRequestOptions {\r\n *   search: string = 'coreTeam=true';\r\n * }\r\n *\r\n * {provide: RequestOptions, useClass: MyOptions};\r\n * ```\r\n *\r\n * The options could also be extended when manually creating a {@link Request}\r\n * object.\r\n *\r\n * ```\r\n * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\r\n *\r\n * const options = new BaseRequestOptions();\r\n * const req = new Request(options.merge({\r\n *   method: RequestMethod.Post,\r\n *   url: 'https://google.com'\r\n * }));\r\n * console.log('req.method:', RequestMethod[req.method]); // Post\r\n * console.log('options.url:', options.url); // null\r\n * console.log('req.url:', req.url); // https://google.com\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar BaseRequestOptions = /** @class */ (function (_super) {\r\n    __extends(BaseRequestOptions, _super);\r\n    function BaseRequestOptions() {\r\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\r\n    }\r\n    BaseRequestOptions = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [])\r\n    ], BaseRequestOptions);\r\n    return BaseRequestOptions;\r\n}(RequestOptions));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// TODO(jeffbcross): properly implement body accessors\r\n/**\r\n * Creates `Request` instances from provided values.\r\n *\r\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\r\n * Spec](https://fetch.spec.whatwg.org/#request-class),\r\n * but is considered a static value whose body can be accessed many times. There are other\r\n * differences in the implementation, but this is the most significant.\r\n *\r\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\r\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\r\n * One such example is when creating services that wrap higher-level services, like {@link Http},\r\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\r\n *\r\n * ```typescript\r\n * import {Injectable, Injector} from '@angular/core';\r\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\r\n *\r\n * @Injectable()\r\n * class AutoAuthenticator {\r\n *   constructor(public http:Http) {}\r\n *   request(url:string) {\r\n *     return this.http.request(new Request({\r\n *       method: RequestMethod.Get,\r\n *       url: url,\r\n *       search: 'password=123'\r\n *     }));\r\n *   }\r\n * }\r\n *\r\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\r\n * var authenticator = injector.get(AutoAuthenticator);\r\n * authenticator.request('people.json').subscribe(res => {\r\n *   //URL should have included '?password=123'\r\n *   console.log('people', res.json());\r\n * });\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar Request = /** @class */ (function (_super) {\r\n    __extends(Request, _super);\r\n    function Request(requestOptions) {\r\n        var _this = _super.call(this) || this;\r\n        // TODO: assert that url is present\r\n        var url = requestOptions.url;\r\n        _this.url = requestOptions.url;\r\n        var paramsArg = requestOptions.params || requestOptions.search;\r\n        if (paramsArg) {\r\n            var params = void 0;\r\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\r\n                params = urlEncodeParams(paramsArg).toString();\r\n            }\r\n            else {\r\n                params = paramsArg.toString();\r\n            }\r\n            if (params.length > 0) {\r\n                var prefix = '?';\r\n                if (_this.url.indexOf('?') != -1) {\r\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\r\n                }\r\n                // TODO: just delete search-query-looking string in url?\r\n                _this.url = url + prefix + params;\r\n            }\r\n        }\r\n        _this._body = requestOptions.body;\r\n        _this.method = normalizeMethodName(requestOptions.method);\r\n        // TODO(jeffbcross): implement behavior\r\n        // Defaults to 'omit', consistent with browser\r\n        _this.headers = new Headers(requestOptions.headers);\r\n        _this.contentType = _this.detectContentType();\r\n        _this.withCredentials = requestOptions.withCredentials;\r\n        _this.responseType = requestOptions.responseType;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns the content type enum based on header options.\r\n     */\r\n    Request.prototype.detectContentType = function () {\r\n        switch (this.headers.get('content-type')) {\r\n            case 'application/json':\r\n                return ContentType.JSON;\r\n            case 'application/x-www-form-urlencoded':\r\n                return ContentType.FORM;\r\n            case 'multipart/form-data':\r\n                return ContentType.FORM_DATA;\r\n            case 'text/plain':\r\n            case 'text/html':\r\n                return ContentType.TEXT;\r\n            case 'application/octet-stream':\r\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\r\n            default:\r\n                return this.detectContentTypeFromBody();\r\n        }\r\n    };\r\n    /**\r\n     * Returns the content type of request's body based on its type.\r\n     */\r\n    Request.prototype.detectContentTypeFromBody = function () {\r\n        if (this._body == null) {\r\n            return ContentType.NONE;\r\n        }\r\n        else if (this._body instanceof URLSearchParams) {\r\n            return ContentType.FORM;\r\n        }\r\n        else if (this._body instanceof FormData) {\r\n            return ContentType.FORM_DATA;\r\n        }\r\n        else if (this._body instanceof Blob$1) {\r\n            return ContentType.BLOB;\r\n        }\r\n        else if (this._body instanceof ArrayBuffer$1) {\r\n            return ContentType.ARRAY_BUFFER;\r\n        }\r\n        else if (this._body && typeof this._body === 'object') {\r\n            return ContentType.JSON;\r\n        }\r\n        else {\r\n            return ContentType.TEXT;\r\n        }\r\n    };\r\n    /**\r\n     * Returns the request's body according to its type. If body is undefined, return\r\n     * null.\r\n     */\r\n    Request.prototype.getBody = function () {\r\n        switch (this.contentType) {\r\n            case ContentType.JSON:\r\n                return this.text();\r\n            case ContentType.FORM:\r\n                return this.text();\r\n            case ContentType.FORM_DATA:\r\n                return this._body;\r\n            case ContentType.TEXT:\r\n                return this.text();\r\n            case ContentType.BLOB:\r\n                return this.blob();\r\n            case ContentType.ARRAY_BUFFER:\r\n                return this.arrayBuffer();\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n    return Request;\r\n}(Body));\r\nfunction urlEncodeParams(params) {\r\n    var searchParams = new URLSearchParams();\r\n    Object.keys(params).forEach(function (key) {\r\n        var value = params[key];\r\n        if (value && Array.isArray(value)) {\r\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\r\n        }\r\n        else {\r\n            searchParams.append(key, value.toString());\r\n        }\r\n    });\r\n    return searchParams;\r\n}\r\nvar noop = function () { };\r\nvar w = typeof window == 'object' ? window : noop;\r\nvar FormData = w /** TODO #9100 */['FormData'] || noop;\r\nvar Blob$1 = w /** TODO #9100 */['Blob'] || noop;\r\nvar ArrayBuffer$1 = w /** TODO #9100 */['ArrayBuffer'] || noop;\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction httpRequest(backend, request) {\r\n    return backend.createConnection(request).response;\r\n}\r\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\r\n    var newOptions = defaultOpts;\r\n    if (providedOpts) {\r\n        // Hack so Dart can used named parameters\r\n        return newOptions.merge(new RequestOptions({\r\n            method: providedOpts.method || method,\r\n            url: providedOpts.url || url,\r\n            search: providedOpts.search,\r\n            params: providedOpts.params,\r\n            headers: providedOpts.headers,\r\n            body: providedOpts.body,\r\n            withCredentials: providedOpts.withCredentials,\r\n            responseType: providedOpts.responseType\r\n        }));\r\n    }\r\n    return newOptions.merge(new RequestOptions({ method: method, url: url }));\r\n}\r\n/**\r\n * Performs http requests using `XMLHttpRequest` as the default backend.\r\n *\r\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\r\n * `request` returns an `Observable` which will emit a single {@link Response} when a\r\n * response is received.\r\n *\r\n * @usageNotes\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\r\n * import {map} from 'rxjs/operators';\r\n *\r\n * @Component({\r\n *   selector: 'http-app',\r\n *   viewProviders: [HTTP_PROVIDERS],\r\n *   templateUrl: 'people.html'\r\n * })\r\n * class PeopleComponent {\r\n *   constructor(http: Http) {\r\n *     http.get('people.json')\r\n *       // Call map on the response observable to get the parsed people object\r\n *       .pipe(map(res => res.json()))\r\n *       // Subscribe to the observable to get the parsed people object and attach it to the\r\n *       // component\r\n *       .subscribe(people => this.people = people);\r\n *   }\r\n * }\r\n * ```\r\n *\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\r\n * ```\r\n *\r\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\r\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\r\n * the {@link XHRBackend} provider, as in the following example:\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import {BaseRequestOptions, Http} from '@angular/http';\r\n * import {MockBackend} from '@angular/http/testing';\r\n * var injector = Injector.resolveAndCreate([\r\n *   BaseRequestOptions,\r\n *   MockBackend,\r\n *   {provide: Http, useFactory:\r\n *       function(backend, defaultOptions) {\r\n *         return new Http(backend, defaultOptions);\r\n *       },\r\n *       deps: [MockBackend, BaseRequestOptions]}\r\n * ]);\r\n * var http = injector.get(Http);\r\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\r\n * ```\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar Http = /** @class */ (function () {\r\n    function Http(_backend, _defaultOptions) {\r\n        this._backend = _backend;\r\n        this._defaultOptions = _defaultOptions;\r\n    }\r\n    /**\r\n     * Performs any type of http request. First argument is required, and can either be a url or\r\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\r\n     * object can be provided as the 2nd argument. The options object will be merged with the values\r\n     * of {@link BaseRequestOptions} before performing the request.\r\n     */\r\n    Http.prototype.request = function (url, options) {\r\n        var responseObservable;\r\n        if (typeof url === 'string') {\r\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\r\n        }\r\n        else if (url instanceof Request) {\r\n            responseObservable = httpRequest(this._backend, url);\r\n        }\r\n        else {\r\n            throw new Error('First argument must be a url string or Request instance.');\r\n        }\r\n        return responseObservable;\r\n    };\r\n    /**\r\n     * Performs a request with `get` http method.\r\n     */\r\n    Http.prototype.get = function (url, options) {\r\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\r\n    };\r\n    /**\r\n     * Performs a request with `post` http method.\r\n     */\r\n    Http.prototype.post = function (url, body, options) {\r\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\r\n    };\r\n    /**\r\n     * Performs a request with `put` http method.\r\n     */\r\n    Http.prototype.put = function (url, body, options) {\r\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\r\n    };\r\n    /**\r\n     * Performs a request with `delete` http method.\r\n     */\r\n    Http.prototype.delete = function (url, options) {\r\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\r\n    };\r\n    /**\r\n     * Performs a request with `patch` http method.\r\n     */\r\n    Http.prototype.patch = function (url, body, options) {\r\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\r\n    };\r\n    /**\r\n     * Performs a request with `head` http method.\r\n     */\r\n    Http.prototype.head = function (url, options) {\r\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\r\n    };\r\n    /**\r\n     * Performs a request with `options` http method.\r\n     */\r\n    Http.prototype.options = function (url, options) {\r\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\r\n    };\r\n    Http = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [ConnectionBackend, RequestOptions])\r\n    ], Http);\r\n    return Http;\r\n}());\r\n/**\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar Jsonp = /** @class */ (function (_super) {\r\n    __extends(Jsonp, _super);\r\n    function Jsonp(backend, defaultOptions) {\r\n        return _super.call(this, backend, defaultOptions) || this;\r\n    }\r\n    /**\r\n     * Performs any type of http request. First argument is required, and can either be a url or\r\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\r\n     * object can be provided as the 2nd argument. The options object will be merged with the values\r\n     * of {@link BaseRequestOptions} before performing the request.\r\n     *\r\n     * @security Regular XHR is the safest alternative to JSONP for most applications, and is\r\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\r\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\r\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\r\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\r\n     * future security issues (e.g. content sniffing).  For more detail, see the\r\n     * [Security Guide](http://g.co/ng/security).\r\n     */\r\n    Jsonp.prototype.request = function (url, options) {\r\n        var responseObservable;\r\n        if (typeof url === 'string') {\r\n            url =\r\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url));\r\n        }\r\n        if (url instanceof Request) {\r\n            if (url.method !== RequestMethod.Get) {\r\n                throw new Error('JSONP requests must use GET request method.');\r\n            }\r\n            responseObservable = httpRequest(this._backend, url);\r\n        }\r\n        else {\r\n            throw new Error('First argument must be a url string or Request instance.');\r\n        }\r\n        return responseObservable;\r\n    };\r\n    Jsonp = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [ConnectionBackend, RequestOptions])\r\n    ], Jsonp);\r\n    return Jsonp;\r\n}(Http));\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction _createDefaultCookieXSRFStrategy() {\r\n    return new CookieXSRFStrategy();\r\n}\r\nfunction httpFactory(xhrBackend, requestOptions) {\r\n    return new Http(xhrBackend, requestOptions);\r\n}\r\nfunction jsonpFactory(jsonpBackend, requestOptions) {\r\n    return new Jsonp(jsonpBackend, requestOptions);\r\n}\r\n/**\r\n * The module that includes http's providers\r\n *\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar HttpModule = /** @class */ (function () {\r\n    function HttpModule() {\r\n    }\r\n    HttpModule = __decorate([\r\n        NgModule({\r\n            providers: [\r\n                // TODO(pascal): use factory type annotations once supported in DI\r\n                // issue: https://github.com/angular/angular/issues/3183\r\n                { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\r\n                BrowserXhr,\r\n                { provide: RequestOptions, useClass: BaseRequestOptions },\r\n                { provide: ResponseOptions, useClass: BaseResponseOptions },\r\n                XHRBackend,\r\n                { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\r\n            ],\r\n        })\r\n    ], HttpModule);\r\n    return HttpModule;\r\n}());\r\n/**\r\n * The module that includes jsonp's providers\r\n *\r\n * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp\r\n * @publicApi\r\n */\r\nvar JsonpModule = /** @class */ (function () {\r\n    function JsonpModule() {\r\n    }\r\n    JsonpModule = __decorate([\r\n        NgModule({\r\n            providers: [\r\n                // TODO(pascal): use factory type annotations once supported in DI\r\n                // issue: https://github.com/angular/angular/issues/3183\r\n                { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\r\n                BrowserJsonp,\r\n                { provide: RequestOptions, useClass: BaseRequestOptions },\r\n                { provide: ResponseOptions, useClass: BaseResponseOptions },\r\n                JSONPBackend,\r\n            ],\r\n        })\r\n    ], JsonpModule);\r\n    return JsonpModule;\r\n}());\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @deprecated see https://angular.io/guide/http\r\n * @publicApi\r\n */\r\nvar VERSION = new Version('7.2.15');\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { BrowserJsonp as Éµangular_packages_http_http_e, Body as Éµangular_packages_http_http_f, _createDefaultCookieXSRFStrategy as Éµangular_packages_http_http_a, httpFactory as Éµangular_packages_http_http_b, jsonpFactory as Éµangular_packages_http_http_c, BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION };\r\n\r\n"]}