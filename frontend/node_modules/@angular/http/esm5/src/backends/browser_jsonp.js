/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var _nextRequestId = 0;
export var JSONP_HOME = '__ng_jsonp__';
var _jsonpConnections = null;
function _getJsonpConnections() {
    var w = typeof window == 'object' ? window : {};
    if (_jsonpConnections === null) {
        _jsonpConnections = w[JSONP_HOME] = {};
    }
    return _jsonpConnections;
}
// Make sure not to evaluate this in a non-browser environment!
var BrowserJsonp = /** @class */ (function () {
    function BrowserJsonp() {
    }
    // Construct a <script> element with the specified URL
    BrowserJsonp.prototype.build = function (url) {
        var node = document.createElement('script');
        node.src = url;
        return node;
    };
    BrowserJsonp.prototype.nextRequestID = function () { return "__req" + _nextRequestId++; };
    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + "." + id + ".finished"; };
    BrowserJsonp.prototype.exposeConnection = function (id, connection) {
        var connections = _getJsonpConnections();
        connections[id] = connection;
    };
    BrowserJsonp.prototype.removeConnection = function (id) {
        var connections = _getJsonpConnections();
        connections[id] = null;
    };
    // Attach the <script> element to the DOM
    BrowserJsonp.prototype.send = function (node) { document.body.appendChild((node)); };
    // Remove <script> element from the DOM
    BrowserJsonp.prototype.cleanup = function (node) {
        if (node.parentNode) {
            node.parentNode.removeChild((node));
        }
    };
BrowserJsonp.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: BrowserJsonp, factory: function BrowserJsonp_Factory(t) { return new (t || BrowserJsonp)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(BrowserJsonp, [{
        type: Injectable
    }], function () { return []; }, { build: [], nextRequestID: [], requestCallback: [], exposeConnection: [], removeConnection: [], send: [], cleanup: [] });
    return BrowserJsonp;
}());
export { BrowserJsonp };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L1Byb2plY3RzL1Rlc3RQcm9qZWN0L0NoYXJnaW5nL0NoYXJnaW5nL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYW5ndWxhci9odHRwL2VzbTUvc3JjL2JhY2tlbmRzL2Jyb3dzZXJfanNvbnAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFTQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQXFDTTs7Ozs4SkFHZSIsImZpbGUiOiJicm93c2VyX2pzb25wLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxyXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXHJcbiAqL1xyXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbnZhciBfbmV4dFJlcXVlc3RJZCA9IDA7XHJcbmV4cG9ydCB2YXIgSlNPTlBfSE9NRSA9ICdfX25nX2pzb25wX18nO1xyXG52YXIgX2pzb25wQ29ubmVjdGlvbnMgPSBudWxsO1xyXG5mdW5jdGlvbiBfZ2V0SnNvbnBDb25uZWN0aW9ucygpIHtcclxuICAgIHZhciB3ID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyA/IHdpbmRvdyA6IHt9O1xyXG4gICAgaWYgKF9qc29ucENvbm5lY3Rpb25zID09PSBudWxsKSB7XHJcbiAgICAgICAgX2pzb25wQ29ubmVjdGlvbnMgPSB3W0pTT05QX0hPTUVdID0ge307XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX2pzb25wQ29ubmVjdGlvbnM7XHJcbn1cclxuLy8gTWFrZSBzdXJlIG5vdCB0byBldmFsdWF0ZSB0aGlzIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQhXHJcbnZhciBCcm93c2VySnNvbnAgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCcm93c2VySnNvbnAoKSB7XHJcbiAgICB9XHJcbiAgICAvLyBDb25zdHJ1Y3QgYSA8c2NyaXB0PiBlbGVtZW50IHdpdGggdGhlIHNwZWNpZmllZCBVUkxcclxuICAgIEJyb3dzZXJKc29ucC5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgICBub2RlLnNyYyA9IHVybDtcclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgIH07XHJcbiAgICBCcm93c2VySnNvbnAucHJvdG90eXBlLm5leHRSZXF1ZXN0SUQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIl9fcmVxXCIgKyBfbmV4dFJlcXVlc3RJZCsrOyB9O1xyXG4gICAgQnJvd3Nlckpzb25wLnByb3RvdHlwZS5yZXF1ZXN0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIEpTT05QX0hPTUUgKyBcIi5cIiArIGlkICsgXCIuZmluaXNoZWRcIjsgfTtcclxuICAgIEJyb3dzZXJKc29ucC5wcm90b3R5cGUuZXhwb3NlQ29ubmVjdGlvbiA9IGZ1bmN0aW9uIChpZCwgY29ubmVjdGlvbikge1xyXG4gICAgICAgIHZhciBjb25uZWN0aW9ucyA9IF9nZXRKc29ucENvbm5lY3Rpb25zKCk7XHJcbiAgICAgICAgY29ubmVjdGlvbnNbaWRdID0gY29ubmVjdGlvbjtcclxuICAgIH07XHJcbiAgICBCcm93c2VySnNvbnAucHJvdG90eXBlLnJlbW92ZUNvbm5lY3Rpb24gPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICB2YXIgY29ubmVjdGlvbnMgPSBfZ2V0SnNvbnBDb25uZWN0aW9ucygpO1xyXG4gICAgICAgIGNvbm5lY3Rpb25zW2lkXSA9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgLy8gQXR0YWNoIHRoZSA8c2NyaXB0PiBlbGVtZW50IHRvIHRoZSBET01cclxuICAgIEJyb3dzZXJKc29ucC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChub2RlKSB7IGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoKG5vZGUpKTsgfTtcclxuICAgIC8vIFJlbW92ZSA8c2NyaXB0PiBlbGVtZW50IGZyb20gdGhlIERPTVxyXG4gICAgQnJvd3Nlckpzb25wLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCgobm9kZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBCcm93c2VySnNvbnAgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xyXG4gICAgICAgIEluamVjdGFibGUoKVxyXG4gICAgXSwgQnJvd3Nlckpzb25wKTtcclxuICAgIHJldHVybiBCcm93c2VySnNvbnA7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEJyb3dzZXJKc29ucCB9O1xyIl19