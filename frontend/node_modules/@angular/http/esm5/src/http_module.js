/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
/**
 * @module
 * @description
 * The http module provides services to perform http requests. To get started, see the {@link Http}
 * class.
 */
import { NgModule } from '@angular/core';
import { BrowserJsonp } from './backends/browser_jsonp';
import { BrowserXhr } from './backends/browser_xhr';
import { JSONPBackend } from './backends/jsonp_backend';
import { CookieXSRFStrategy, XHRBackend } from './backends/xhr_backend';
import { BaseRequestOptions, RequestOptions } from './base_request_options';
import { BaseResponseOptions, ResponseOptions } from './base_response_options';
import { Http, Jsonp } from './http';
import { XSRFStrategy } from './interfaces';
import * as ɵngcc0 from '@angular/core';
export function _createDefaultCookieXSRFStrategy() {
    return new CookieXSRFStrategy();
}
export function httpFactory(xhrBackend, requestOptions) {
    return new Http(xhrBackend, requestOptions);
}
export function jsonpFactory(jsonpBackend, requestOptions) {
    return new Jsonp(jsonpBackend, requestOptions);
}
/**
 * The module that includes http's providers
 *
 * @deprecated see https://angular.io/guide/http
 * @publicApi
 */
var HttpModule = /** @class */ (function () {
    function HttpModule() {
    }
HttpModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: HttpModule });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(HttpModule, [{
        type: NgModule,
        args: [{
                providers: [
                    // TODO(pascal): use factory type annotations once supported in DI
                    // issue: https://github.com/angular/angular/issues/3183
                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },
                    BrowserXhr,
                    { provide: RequestOptions, useClass: BaseRequestOptions },
                    { provide: ResponseOptions, useClass: BaseResponseOptions },
                    XHRBackend,
                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },
                ]
            }]
    }], function () { return []; }, null);
HttpModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function HttpModule_Factory(t) { return new (t || HttpModule)(); }, providers: [
        // TODO(pascal): use factory type annotations once supported in DI
        // issue: https://github.com/angular/angular/issues/3183
        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },
        BrowserXhr,
        { provide: RequestOptions, useClass: BaseRequestOptions },
        { provide: ResponseOptions, useClass: BaseResponseOptions },
        XHRBackend,
        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },
    ] });
    return HttpModule;
}());
export { HttpModule };
/**
 * The module that includes jsonp's providers
 *
 * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp
 * @publicApi
 */
var JsonpModule = /** @class */ (function () {
    function JsonpModule() {
    }
JsonpModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: JsonpModule });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(JsonpModule, [{
        type: NgModule,
        args: [{
                providers: [
                    // TODO(pascal): use factory type annotations once supported in DI
                    // issue: https://github.com/angular/angular/issues/3183
                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },
                    BrowserJsonp,
                    { provide: RequestOptions, useClass: BaseRequestOptions },
                    { provide: ResponseOptions, useClass: BaseResponseOptions },
                    JSONPBackend,
                ]
            }]
    }], function () { return []; }, null);
JsonpModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function JsonpModule_Factory(t) { return new (t || JsonpModule)(); }, providers: [
        // TODO(pascal): use factory type annotations once supported in DI
        // issue: https://github.com/angular/angular/issues/3183
        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },
        BrowserJsonp,
        { provide: RequestOptions, useClass: BaseRequestOptions },
        { provide: ResponseOptions, useClass: BaseResponseOptions },
        JSONPBackend,
    ] });
    return JsonpModule;
}());
export { JsonpModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L1Byb2plY3RzL1Rlc3RQcm9qZWN0L0NoYXJnaW5nL0NoYXJnaW5nL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYW5ndWxhci9odHRwL2VzbTUvc3JjL2h0dHBfbW9kdWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBaUJLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQWNjOzs7Ozs7Ozs7Ozs7S0FZZDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBYWUiLCJmaWxlIjoiaHR0cF9tb2R1bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXHJcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcclxuICovXHJcbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbi8qKlxyXG4gKiBAbW9kdWxlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgaHR0cCBtb2R1bGUgcHJvdmlkZXMgc2VydmljZXMgdG8gcGVyZm9ybSBodHRwIHJlcXVlc3RzLiBUbyBnZXQgc3RhcnRlZCwgc2VlIHRoZSB7QGxpbmsgSHR0cH1cclxuICogY2xhc3MuXHJcbiAqL1xyXG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCcm93c2VySnNvbnAgfSBmcm9tICcuL2JhY2tlbmRzL2Jyb3dzZXJfanNvbnAnO1xyXG5pbXBvcnQgeyBCcm93c2VyWGhyIH0gZnJvbSAnLi9iYWNrZW5kcy9icm93c2VyX3hocic7XHJcbmltcG9ydCB7IEpTT05QQmFja2VuZCB9IGZyb20gJy4vYmFja2VuZHMvanNvbnBfYmFja2VuZCc7XHJcbmltcG9ydCB7IENvb2tpZVhTUkZTdHJhdGVneSwgWEhSQmFja2VuZCB9IGZyb20gJy4vYmFja2VuZHMveGhyX2JhY2tlbmQnO1xyXG5pbXBvcnQgeyBCYXNlUmVxdWVzdE9wdGlvbnMsIFJlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi9iYXNlX3JlcXVlc3Rfb3B0aW9ucyc7XHJcbmltcG9ydCB7IEJhc2VSZXNwb25zZU9wdGlvbnMsIFJlc3BvbnNlT3B0aW9ucyB9IGZyb20gJy4vYmFzZV9yZXNwb25zZV9vcHRpb25zJztcclxuaW1wb3J0IHsgSHR0cCwgSnNvbnAgfSBmcm9tICcuL2h0dHAnO1xyXG5pbXBvcnQgeyBYU1JGU3RyYXRlZ3kgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xyXG5leHBvcnQgZnVuY3Rpb24gX2NyZWF0ZURlZmF1bHRDb29raWVYU1JGU3RyYXRlZ3koKSB7XHJcbiAgICByZXR1cm4gbmV3IENvb2tpZVhTUkZTdHJhdGVneSgpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBodHRwRmFjdG9yeSh4aHJCYWNrZW5kLCByZXF1ZXN0T3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG5ldyBIdHRwKHhockJhY2tlbmQsIHJlcXVlc3RPcHRpb25zKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24ganNvbnBGYWN0b3J5KGpzb25wQmFja2VuZCwgcmVxdWVzdE9wdGlvbnMpIHtcclxuICAgIHJldHVybiBuZXcgSnNvbnAoanNvbnBCYWNrZW5kLCByZXF1ZXN0T3B0aW9ucyk7XHJcbn1cclxuLyoqXHJcbiAqIFRoZSBtb2R1bGUgdGhhdCBpbmNsdWRlcyBodHRwJ3MgcHJvdmlkZXJzXHJcbiAqXHJcbiAqIEBkZXByZWNhdGVkIHNlZSBodHRwczovL2FuZ3VsYXIuaW8vZ3VpZGUvaHR0cFxyXG4gKiBAcHVibGljQXBpXHJcbiAqL1xyXG52YXIgSHR0cE1vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEh0dHBNb2R1bGUoKSB7XHJcbiAgICB9XHJcbiAgICBIdHRwTW9kdWxlID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBOZ01vZHVsZSh7XHJcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhwYXNjYWwpOiB1c2UgZmFjdG9yeSB0eXBlIGFubm90YXRpb25zIG9uY2Ugc3VwcG9ydGVkIGluIERJXHJcbiAgICAgICAgICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMzE4M1xyXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBIdHRwLCB1c2VGYWN0b3J5OiBodHRwRmFjdG9yeSwgZGVwczogW1hIUkJhY2tlbmQsIFJlcXVlc3RPcHRpb25zXSB9LFxyXG4gICAgICAgICAgICAgICAgQnJvd3NlclhocixcclxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogUmVxdWVzdE9wdGlvbnMsIHVzZUNsYXNzOiBCYXNlUmVxdWVzdE9wdGlvbnMgfSxcclxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogUmVzcG9uc2VPcHRpb25zLCB1c2VDbGFzczogQmFzZVJlc3BvbnNlT3B0aW9ucyB9LFxyXG4gICAgICAgICAgICAgICAgWEhSQmFja2VuZCxcclxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogWFNSRlN0cmF0ZWd5LCB1c2VGYWN0b3J5OiBfY3JlYXRlRGVmYXVsdENvb2tpZVhTUkZTdHJhdGVneSB9LFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIH0pXHJcbiAgICBdLCBIdHRwTW9kdWxlKTtcclxuICAgIHJldHVybiBIdHRwTW9kdWxlO1xyXG59KCkpO1xyXG5leHBvcnQgeyBIdHRwTW9kdWxlIH07XHJcbi8qKlxyXG4gKiBUaGUgbW9kdWxlIHRoYXQgaW5jbHVkZXMganNvbnAncyBwcm92aWRlcnNcclxuICpcclxuICogQGRlcHJlY2F0ZWQgc2VlIGh0dHBzOi8vYW5ndWxhci5pby9hcGkvY29tbW9uL2h0dHAvSHR0cENsaWVudCNqc29ucFxyXG4gKiBAcHVibGljQXBpXHJcbiAqL1xyXG52YXIgSnNvbnBNb2R1bGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBKc29ucE1vZHVsZSgpIHtcclxuICAgIH1cclxuICAgIEpzb25wTW9kdWxlID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBOZ01vZHVsZSh7XHJcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhwYXNjYWwpOiB1c2UgZmFjdG9yeSB0eXBlIGFubm90YXRpb25zIG9uY2Ugc3VwcG9ydGVkIGluIERJXHJcbiAgICAgICAgICAgICAgICAvLyBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMzE4M1xyXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBKc29ucCwgdXNlRmFjdG9yeToganNvbnBGYWN0b3J5LCBkZXBzOiBbSlNPTlBCYWNrZW5kLCBSZXF1ZXN0T3B0aW9uc10gfSxcclxuICAgICAgICAgICAgICAgIEJyb3dzZXJKc29ucCxcclxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogUmVxdWVzdE9wdGlvbnMsIHVzZUNsYXNzOiBCYXNlUmVxdWVzdE9wdGlvbnMgfSxcclxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogUmVzcG9uc2VPcHRpb25zLCB1c2VDbGFzczogQmFzZVJlc3BvbnNlT3B0aW9ucyB9LFxyXG4gICAgICAgICAgICAgICAgSlNPTlBCYWNrZW5kLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIH0pXHJcbiAgICBdLCBKc29ucE1vZHVsZSk7XHJcbiAgICByZXR1cm4gSnNvbnBNb2R1bGU7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEpzb25wTW9kdWxlIH07XHIiXX0=